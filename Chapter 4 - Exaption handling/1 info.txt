Exception:
        Cause of Error
1.  ArithmeticError: 
        Base class for all errors that occur for numeric calculation.
2.  AssertionError: 
        Raised in case of failure of the assert statement.
3.  AttributeError: 
        Raised in case of failure of attribute reference or assignment.
4.  Exception: 
        Base class for all exceptions.
5.  EOFError: 
        Raised when there is no input from either the raw _input or input function and the end of file is reached.
6.  EnvironmentError: 
        Base class for all exceptions that occur outside the Python environment.
7.  FloatingPointError: 
        Raised when a floating point calculation fails.
8.  ImportError: 
        Raised when an import statement fails.
9.  IndexError: 
        Raised when an index is not found in a sequence.
10. IDError: 
        Raised when an input/output operation fails, such as the print statement or the open function when trying to open a file that does not exist.
11. IndentationError: 
        Raised when indentation is not specified properly.
12. KeyboardInterrupt: 
        Raised when the user interrupts program execution, usually by pressing Ctrl+c.
13. KeyError: 
        Raised when the specified key is not found in the dictionary.
14. LookupError: 
        Base class for all lookup errors.
15. LookupError: 
        Base class for all lookup errors.
16. NameErrorRaised: 
        when an identifier is not found in the local or global namespace.
17. NotImplementedError: 
        Raised when an abstract method that needs to be implemented in an inherited class is not actually implemented.
18. OverflowError: 
        Raised when a calculation exceeds maximum limit for a numeric type.
19. OsError: 
        Raised for operating system-related errors.
20. RuntimeError: 
        Raised when a generated error does not fall into any category.
21. StopIteration: 
        Raised when the next method of an iterator does not point to any object.
22. SystemExit: 
        Raised by the sys.exit function.
23. StandardError: 
        Base class for all built-in exceptions except StopIteration and SystemExit.
24. SyntaxError : 
        Raised when there is an error in Python syntax.
25. SystemError: 
        Raised when the interpreter finds an internal problem, but when this error is encountered the Python interpreter does not exit.
26. SystemExit: 
        Raised when Python interpreter is quit by using the sys.
27. exit: 
        function. If not handled in the code, causes the interpreter to exit.
28. TypeError: 
        Raised when an operation or function is attempted that is invalid for the specified data type.
29. UnboundLocalError: 
        Raised when trying to access a local variable in a function or method but no value has been assigned to it.
30. ValueError: 
        Raised when the built-in function for a data type has the valid type of arguments, but the arguments have invalid values specified.
31. ZeroDivisionError: 
        Raised when division or modulo by zero takes place for all numeric types.